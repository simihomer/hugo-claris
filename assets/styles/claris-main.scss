/* {{- $page := .Page }} {{- $mediaType := .MediaType }} */
/* File='styles/claris-main.scss': hugo.Environment='{{ hugo.Environment }}' .Page='{{ .Page }}' .ContentTypeList='{{ printf "%v" .ContentTypeList }}' .ContentTypeListID='{{ .ContentTypeListID }}' .ContentType='{{ .ContentType }}' .MediaType='{{ .MediaType }}' */

// Core stylesheets that are included for all media types
@import 'claris/functions';

@import 'claris/colors';

{{- $themeColorSchemePath := default "colors" ($page.Param "themeColorSchemePath") }}
{{- with (default false ($page.Param "themeColorScheme") ) }}
{{- $themeColorSchemeFile := printf "%s/%s" }}
@import 'claris/{{ $themeColorSchemeFile }}';
{{- end }}

$fontTypeDefault: '{{ $page.Param "fontTypeDefault" | default "sans" }}';
$fontTypeContent: '{{ $page.Param "fontTypeContent" | default ($page.Param "fontTypeDefault") }}';
$fontTypeArticle: '{{ $page.Param "fontTypeArticle" | default "serif" }}';
$fontTypeCode:    '{{ $page.Param "fontTypeCode"    | default "mono" }}';
$fontTypeHeading: '{{ $page.Param "fontTypeHeading" | default "inherit" }}';
$fontTypeMeta:    '{{ $page.Param "fontTypeMeta"    | default "inherit" }}';

{{- $fontFamilySans := default "Source Sans 3" ($page.Param "fontFamilySans") }}
{{- $fontFamilySerif := default "Alegreya" ($page.Param "fontFamilySerif") }}
{{- $fontFamilyMono := default "DM Mono" ($page.Param "fontFamilyMono") }}
{{- $fontFamilies := (slice
  (dict "fontType" "default"  "family" $fontFamilySans)
  (dict "fontType" "sans"     "family" $fontFamilySans)
  (dict "fontType" "serif"    "family" $fontFamilySerif)
  (dict "fontType" "mono"     "family" $fontFamilyMono)
) -}}
$fontFamilyMap: ();
$fontDefinitionMap: () !default;
$currentFontDefinition: default !default;
{{- range $fontFamilies }}
  {{- $fontTypeKey := .fontType }}
  {{- $fontTypeSuffix := strings.FirstUpper $fontTypeKey }}
  {{- $familyName :=  .family }}
  {{- $familyID :=  (urlize .family) }}

$fontFamilyID: '{{ $familyID }}';
{{ printf `$fontFamily%vID: '%v'` $fontTypeSuffix $familyID | safeCSS }};

$fontFamilyDefault: (name: '{{ $familyName }}');

{{- $fontsSelfHosted := default false ($page.Param "fontsSelfHosted") }}

{{- if $fontsSelfHosted -}}
  {{- $hostedFontPath := default (absURL "fonts") ($page.Param "hostedFontPath") }}
  $hostedFontPath: '{{ $hostedFontPath }}';
  @import 'claris/fonts/{{ $familyID }}';
{{- end }}

{{- $fallbankFontFamilyStylesheet := printf `/styles/claris/fonts/fallback/%s.*` $familyID }}
{{- if resources.GetMatch $fallbankFontFamilyStylesheet }}
  {{- $familyStack := (slice (printf `%s-fallback` $familyID) (printf `%s-fallback-android` $familyID)) }}
  $fallbackStack: ({{ printf `'%s'` (delimit $familyStack "', '") }});
  $fontFamilyDefault: map-merge($fontFamilyDefault, (fallback: $fallbackStack) );
  @import 'claris/fonts/fallback/{{ $familyID }}';
{{- else }}
  /* No fallback stylesheet found for font family {{ .family }} at {{ $fallbankFontFamilyStylesheet }} */
  @import 'claris/fonts/fallback/{{ $fontTypeKey }}';
{{- end }}

// The font family map may have different structures:
// Simple:
// name: Alegreya; // font-family
// fallback: serif;
//
// Include additional settings such as font-weight for default, bold and italic
// styles: (
//   default: (
//     font-weight: 400
//   )
//   bold: (
//     font-weight: 700
//   )
// );
//
// Include font names and styles for alternative fontTypes:
// fontTypes: (
//   display: (
//     name: Alegreya Sans, // font-family for display type
//       styles: (
//         default: (
//           font-weight: 400
//         )
//         bold: (
//           font-weight: 700
//         )
//       )
//     )
//   )
// );
//
// Include font names and styles for alternative variants:
// variants: (
//   small-caps: (
//     name: Alegreya SC
//     styles: (
//       default: (
//         font-weight: 400
//       )
//       bold: (
//         font-weight: 700
//       )
//     );
//   )
// );

$fontFamilySpec: $fontFamilyDefault;

@if map-has-key($fontFamilyMap, $fontFamilyID) {
  $fontFamilySpec: updateMap($fontFamilySpec, map-get($fontFamilyMap, $fontFamilyID));

  $fallbackStackFamily: map-get($fontFamilySpec, fallback);
  // @if not map-has-key($fontFamilySpec, stack) {
  //   $fontStackFamily: map-get($fontFamilySpec, name), inspect($fallbackStackFamily);
  //   $fontFamilySpec: map-merge($fontFamilySpec, (stack: $fontStackFamily))
  // }
  @if map-has-key($fontFamilySpec, variants) {
    $fontFamilyVariants: ();
    $variants: map-get($fontFamilySpec, variants);
    @each $variant, $variantSpec in $variants {
      @if map-has-key($variantSpec, name) {
        $fallbackStack: defaultTo($fallbackStackFamily, map-get($variantSpec, fallback));
        // $fontStack: map-get($variantSpec, name), inspect($fallbackStack);
        // $variantSpec: map-merge($variantSpec, (stack: $fontStack) );
        $variantSpec: map-merge($variantSpec, (fallback: $fallbackStack) );
      }
      $fontFamilyVariants: map-merge($fontFamilyVariants, ($variant: $variantSpec));
    }
    $fontFamilySpec: map-merge($fontFamilySpec, (variants: $fontFamilyVariants));
  }
}

$fontFamilyMap: map-merge($fontFamilyMap, ({{ $fontTypeKey }}: $fontFamilySpec) );
$fontFamilyMap: map-merge($fontFamilyMap, ({{ $familyID }}: $fontFamilySpec) );

{{- end }}

@import 'claris/variables';
@import 'claris/override';

// Additional stylesheets
@import 'claris/base';
@import 'claris/components';
{{- if (in (slice "all" "screen") $mediaType) }}
@import 'claris/components_screen';
{{- end }}
{{- if (in (slice "all" "print") $mediaType) }}
@import 'claris/components_print';
{{- end }}
@import 'claris/utils';

/*! purgecss start ignore */
@import 'claris/syntax';
/*! purgecss end ignore */
