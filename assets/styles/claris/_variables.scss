/* Style sheet for content type '#{$contentType}' and media type '#{$mediaType}'
 * File='styles/claris/_variables.scss'
 */

@use 'sass:math';

$list-excerpt-width: 20rem;
$list-excerpt-width: math.div(($screenViewBreakpointWidthOneColumn - (3 * $screenViewInnerPaddingOneColumn) ), 2);

// $list-style-indent: 0.16667em;
$list-style-indent: 1em;

$screenViewNavHeightNarrow: 2.5rem;
$screenViewNavHeight: 3rem;

$heading-padding-top: 0.5rem;
$heading-margin-top: 1.5rem;

$main-z-index: 1;

@mixin generate_colors($colors) {
  // Add RGB / RGBA color definitions
  @each $color, $value in $colors {
    --#{$color}: #{$value};
    // --RGB_#{$color}: #{mapColorVarToRGB($colors, $value)};
  }
  // Only define RGB values for select colors
  @each $color in (text bg theme theme-bg choice-bg xhaze highlight-bg-yellow) {
    $value: map-get($colors, $color);
    --RGB_#{$color}: #{mapColorVarToRGB($colors, $value)};
  }
}

@function direction($value) {
  @if index('right' 'left', $value) != null {
    @return 'x';
  }
  @if index('top' 'bottom', $value) != null {
    @return 'y';
  }
  @error "Expected 'top', 'right', 'bottom' or 'left' but got #{$value}";
}

@function is-number($value) {
  @return type-of($value) == 'number';
}

@function is-null($value) {
  @return type-of($value) == 'null';
}

@function is-absolute-length($value) {
  @return type-of($value) == 'number' and index('cm' 'mm' 'in' 'px' 'pt' 'pc', unit($value)) != null;
}

@mixin element-padding($where: 'outer', $top: null, $right: null, $bottom: null, $left: null) {
  @if is-null($right) and (not is-null($top)) {
    $right: $top
  }
  @if is-null($bottom) and (not is-null($top)) {
    $bottom: $top
  }
  @if is-null($left) and (not is-null($right)) {
    $left: $right;
  }

  $pVar: ('top': $top, 'right': $right, 'bottom': $bottom, 'left': $left);
  $pFix: ('top': $top, 'right': $right, 'bottom': $bottom, 'left': $left);
  @each $key, $value in $pVar {
    $direction: direction($key);
    @if type-of($value) == 'number' {
      @if is-absolute-length(#{$value}) {
        @debug "absolute-length: #{$value}";
        $pFix: map-merge($pFix, (#{$key}: #{$value}) );
        $pVar: map-merge($pVar, (
          #{$key}: calc( max(#{$value}, env(safe-area-inset-#{$key}, 0px) ) )
        ));
      }
      @else {
        $valueFix: $value;
        $valueVar: $value;
        @if $value == 0 {
          $valueFix: 0;
          $valueVar: env(safe-area-inset-#{$key}, 0px)
        }
        @else {
          // FIXME: Use a single padding value for browsers that don't support CSS properties
          $valueFix: ($value * $screenViewInnerPaddingNarrow);
          $valueVar: calc( max(#{$value} * var(--#{$where}_padding), env(safe-area-inset-#{$key}, 0px) ) )
        }
        $pFix: map-merge($pFix, (#{$key}: $valueFix));
        $pVar: map-merge($pVar, (#{$key}: $valueVar));
        }
    }
    @else {
      $pFix: map-merge($pFix, (#{$key}: null) );
      $pVar: map-merge($pVar, (#{$key}: null) );
    }
  }
  // @debug "pFix: #{$pFix}";
  // @debug "pVar: #{$pVar}";

  // For browsers that don't support CSS properties
  @each $key, $value in $pFix {
    padding-#{$key}: #{$value};
  }
  @supports (color: var(--CSS-property-support-validation)) {
    @media screen {
      @each $key, $value in $pVar {
        padding-#{$key}: #{$value};
      }
    }
  }
}

@mixin inner-padding() {
  @include element-padding('inner', 1, 1);
}

@mixin inner_horizontal-padding() {
  @include element-padding('inner', unset, 1);
}

@mixin full-bleed_horizontal-padding() {
  @include element-padding('inner', unset, 0);
}

@mixin background_dark() {
  background: var(--bg-dark);
  color: var(--text-dark);
  h1, h2, h3, h4, h5, h6 {
    color: var(--text-dark);
  }
  a {
    color: var(--link-dark);
    @supports (any-hover:hover) {
      &:hover {
        color: var(--link-dark-hover);
      }
      &:active {
        color: var(--link-dark-active);
      }
    }
  }
  svg.icon {
    fill: var(--text-dark);
  }
  .icon {
    img {
      background: none;
    }
    svg {
      fill: var(--text-dark);
    }
  }
}

@mixin link-lvhfa($link: var(--link), $visited: var(--link), $hover: var(--link-hover), $focus: var(--link-hover), $active: var(--link-active)) {
  @media screen {
    a:not(.button):not(sup a) {
      color: $link;
      text-decoration: none;
      &:link {
        color: $link;
      }
      &:visited {
        color: $link;
      }
      &:hover {
        @media (any-hover: hover) {
          color: $hover;
          text-decoration: underline;
          text-underline-position: under;
          text-underline-offset: 0.1em;
        }
      }
      &:focus {
        color: $focus;
        text-decoration: underline;
        text-underline-position: under;
        text-underline-offset: 0.1em;
      }
      &:active {
        color: $active;
        text-decoration: underline;
        text-underline-position: under;
        text-underline-offset: 0.1em;
      }
    }
  }
}

@mixin link-lvhfa-dark() {
  @include link-lvhfa($link: var(--link-dark), $visited: var(--link-dark), $hover: var(--link-dark-hover), $focus: var(--link-dark-hover), $active: var(--link-dark-active));
}

@mixin link-lvhfa-reset($link: unset, $visited: $link, $hover: unset, $focus: unset, $active: unset) {
  @media screen {
    a:not(.button):not(sup a) {
      color: $link;
      text-decoration: none;
      &:link {
        color: $link;
      }
      &:visited {
        color: $link;
      }
      &:hover {
        @media (any-hover: hover) {
          color: $hover;
          text-decoration: none;
          text-underline-position: auto;
          text-underline-offset: auto;
        }
      }
      &:focus {
        color: $focus;
        text-decoration: none;
        text-underline-position: auto;
        text-underline-offset: auto;
      }
      &:active {
        color: $active;
        text-decoration: none;
        text-underline-position: auto;
        text-underline-offset: auto;
      }
    }
  }
}

@mixin link-lvhfa-inherit() {
  a:not(.button):not(nav a):not(sup a) {
    &, &:link, &:visited, &:hover, &:focus, &:active {
      color: inherit;
      text-decoration: none;
    }
  }
}

@mixin color-scheme_transition {
  html[data-color-scheme-transition] & {
    transition: background var(--color-scheme-duration) var(--color-scheme-timing);
  }
}

@mixin content_base() {
  clear: both;
}

@mixin content_base_centered() {
  @include content_base();
  // FIXME: Must not use width: 100% as otherwise
  // the grid track is exceeded when column-gap is > 0px
  // width: 100%;
  margin-left: auto;
  margin-right: auto;
}

@mixin content() {
  // Do nothing
}

@mixin content_singlecolumn() {
  @include inner_horizontal-padding();
  @include content_base_centered();
  max-width: var(--content_max-width);
  // max-width: calc(min(100%, var(--content_max-width)));
}

// Content that has multiple columns
@mixin content_multicolumn() {
  @include inner_horizontal-padding();
  @include content_base_centered();
  max-width: var(--content_max-width); // For IE 11
  @supports (display: grid) {
    max-width: var(--content_multicolumn_max-width);
    // FIXME: Not sure what (min(100%, ...) is supposed to accomplish.
    // Probably not needed anymore
    // max-width: calc(min(100%, var(--content_multicolumn_max-width)));
  }
}

// Content that has multiple panels that span the entire width
@mixin content_full-bleed() {
  @include content_base();
  padding: 0;
  margin: 0;
}

// Limit width of chrome, i.e. header and footer
@mixin chrome() {
  max-width: var(--screenViewWidthChrome);
  margin-left: auto;
  margin-right: auto;
}

@mixin footer() {
  @include content_base_centered();
  @include list-style_none;
  max-width: var(--screenViewWidthChrome);
}

@mixin content_wide() {
  @include content_base();
  max-width: var(--content_wide_max-width);
}

@mixin content_chrome-width() {
  @include content_base();
  max-width: var(--screenViewWidthChrome);
}

@mixin content_ultrawide() {
  @include content_base();
  max-width: var(--screenViewWidthUltrawide);
}

@mixin aside() {
  @media screen and (min-width: $screenViewBreakpointWidthWide) {
    @include geometric-scale('font-size', var(--font-size-aside));
  }
  font-size: var(--font-size-normal);
  @include content_base();
  h1, h2 {
    font-size: var(--font-size-larger-2);
  }
  h3 {
    font-size: var(--font-size-larger-1);
  }
  h4, h5, h6 {
    font-size: var(--font-size-normal);
  }
  @include list-style_none;
}

@mixin aside-meta() {
  @include content_base();
  @include geometric-scale('font-size', var(--font-size-aside-meta));
  font-size: var(--font-size-normal);
}

// @mixin list-style_indented($margin-vertical: math.div($screenViewInnerPaddingMobile, 2), $padding-vertical: math.div($screenViewInnerPaddingMobile, 2), $indent: $list-style-indent) {
@mixin list-style_indented($margin-horizontal: 0, $padding-horizontal: $list-style-indent, $margin-between: 0, $padding-between: 0.5em) {
    ul, ol {
    // list-style: disc outside none;;
    margin-left: $margin-horizontal;
    padding-left: $padding-horizontal;
    & > li + li {
      margin-top: $margin-between;
      padding-top: $padding-between;
    }
  }
  ul > li {
    list-style: disc outside;
    margin-left: 0.8em;
    padding-left: 0.2em;
    // Ensure the link provide a touch target of more than 32px
    & > a {
      // FIXME: Avoid `display: inline-flex` as this leads to inadvertent line breaks
      // and lack of spacing around elments contained inside, such as <em> or <strong>
      // display: inline-flex;
      padding: calc(max(0px, 2.125rem - $padding-between - 1em * var(--line-height)) / 2) 0;
    }
    & > ul li {
      list-style-type: none;
      margin-left: 0;
      padding-left: 0.5em;
      &::before {
        content: 'â€“';
        float: left;
        margin-left: -1.75em;
      }
      & > ul li  {
        margin-left: -0.25em;
        padding-left: 0.75em;
        list-style-type: circle;
        &::before {
          content: none;
        }
      }
    }
  }
  ol li {
    list-style: decimal outside;
    margin-left: 1em;
    padding-left: 0.5em;
  }
  li ul, li ol {
    padding-left: 1.25em;
  }
}

@mixin list-style_none($padding-between: 0.5em) {
  @include list-style_indented(0, 0, 0, $padding-between);
  ul > li {
    list-style: none;
    margin-left: 0;
    padding-left: 0;
    // Ensure the link provide a touch target of more than 32px
    & > a {
      display: inline-flex;
      padding: calc(max(0px, 2.125rem - $padding-between - 1em * var(--line-height)) / 2) 0;
    }
    & > ul li {
      list-style-type: none;
      margin-left: 0;
      padding-left: 0.5em;
      &::before {
        content: none;
      }
    }
  }
}

// Inline list with separators
// https://www.jankollars.com/posts/multi-line-horizontal-list-with-separators/
@mixin inline-separator-list($list-item-separation: 2ch, $list-separator: 'â€¢') {
  $list-sep-width: math.div($list-item-separation, 3.0) + 0.5ch;
  ul {
    display: flex;
    flex-wrap: wrap;
    padding-left: 0;
    list-style: none;
    // margin-left: calc(-3ch);
    margin-left: -$list-item-separation + 0.5ch;
    // clip-path: inset(0 0 0 3ch);
    clip-path: inset(0 0 0 $list-item-separation - 0.5ch);
    & > * {
      padding-left: $list-item-separation;
    }
    li {
      // padding-left: 1ch;
      list-style: none;
      padding-left: $list-item-separation;
      margin-left: math.div(-$list-item-separation, 3.0) - $list-sep-width;
    }
    li::before {
      content: 'â€¢';
      display: inline-block;
      // margin-right: 0.5ch;
      // margin-right: 0.5ch;
      margin-right: math.div($list-item-separation, 3.0) - 0.5ch;
      // width: 1ch;
      width: $list-sep-width;
      text-align: center;
    }
  }
}

@mixin viewport($width: 1024px, $margin: 25px) {
  max-width: $width;
  margin: $margin auto;
  @content;
}

@mixin shadow($opacity: 0.17) {
  box-shadow: 0 0 3rem rgba(0,0,0,$opacity);
  &:hover {
    box-shadow: 0 0 5rem rgba(0,0,0, (1.5 * $opacity));
  }
}

@mixin drop-shadow($dist: 3rem, $opacity: 0.2, $hover-opacity: 0.4) {
  box-shadow: 0 0 $dist hsla(0, 0%, 0%, $opacity);
  &:hover {
    box-shadow: 0 0 $dist hsla(0, 0%, 0%, $hover-opacity);
  }
  @media screen {
    html[data-color-scheme="dark"] & {
      box-shadow: 0 0 $dist hsla(0, 0%, 100%, $opacity);
      &:hover {
        box-shadow: 0 0 $dist hsla(0, 0%, 100%, $hover-opacity);
      }
    }
  }
  @media screen and (prefers-color-scheme: dark) {
    html:not([data-color-scheme="light"]) & {
      box-shadow: 0 0 $dist hsla(0, 0%, 100%, $opacity);
      &:hover {
        box-shadow: 0 0 $dist hsla(0, 0%, 100%, $hover-opacity);
      }
    }
  }
}

@mixin drop-shadow-offset($x: 0, $y: 0, $dist: 3rem, $opacity: 0.2, $hover-opacity: 0.4) {
  box-shadow: $x $y $dist rgba(0, 0, 0, $opacity);
  &:hover {
    box-shadow: $x $y $dist rgba(0, 0, 0, $hover-opacity);
  }
}

@mixin background-gradient-choice-haze($direction, $alpha) {
  background: linear-gradient(#{$direction},
    rgba(var(--RGB_choice-bg), #{$alpha}) 0%,
    rgba(var(--RGB_choice-bg), #{$alpha}) 20%,
    rgba(var(--RGB_xhaze), #{$alpha}) 90%,
    rgba(var(--RGB_xhaze), #{$alpha}) 100%);
}

@mixin background-gradient-translucent($direction, $alpha: 0.9, $alpha-blur: 0.6) {
  @include background-gradient-choice-haze($direction, $alpha);
  @if $alpha-blur > 0 {
    @supports ((-webkit-backdrop-filter: none) or (backdrop-filter: none)) {
      @include background-gradient-choice-haze($direction, $alpha-blur);
      backdrop-filter: blur(50px);
      -webkit-backdrop-filter: blur(50px);
    }
  }
}

/*
 * Ensure headings with ids (e.g. /about#experience) are not hidden by sticky header
 */
// https://stackoverflow.com/q/4086107/617559
// Other ideas: https://css-tricks.com/hash-tag-links-padding/, e.g.
//   https://codepen.io/kirkgleffe/pen/DfvuE
// Approach based on CSS property does not work with IE 11 and cannot be overridden with Autoprefixer
// html {
//   --navigation-header-height: #{$offset};
// }
// .main_claris {
//   padding-top: #{$offset}; // For IE11 with postCSS Autoprefixer
//   padding-top: var(--navigation-header-height);
// }
// Note: the CSS below must be applied to all elements with an id, such as footnotes,
// not only headings
@mixin nav-bar-offset_legacy($offset: $screenViewNavHeight) {
  $anchor-offset: 1rem;
  .main_claris {
    padding-top: $offset;
    margin-top: 0;
  }
  main {
    [id]:target {
      -webkit-background-clip: content-box;
      background-clip: content-box;
      padding-top: $offset + $anchor-offset;
      margin-top: - $offset - $anchor-offset;
      &.article_title {
        padding-top: calc(#{$offset} + #{$heading-padding-top});
        margin-top: - $offset;
      }
      &#contentContainer {
        padding-top: $offset;
        margin-top: - $offset;
      }
    }
    h1, h2, h3, h4, h5, h6 {
      $heading-offset: -1rem;
      &[id]:target {
        padding-top: calc( #{$offset} + #{$heading-offset} + #{$heading-margin-top} + #{$heading-padding-top} );
        margin-top: - $offset - $heading-offset;
      }
    }
  }
  // .content {
  // FIXME: Not applicable with layout=panel
  //   // Required as height of header pushes content down when position: sticky vs. position: fixed
  //   padding-top: inherit;
  // }
}

@mixin nav-bar-offset($offset: $screenViewNavHeight) {
  $anchor-offset: 0.5rem;
  .main_claris {
    padding-top: $offset;
    margin-top: 0;
    h1, h2, h3, h4, h5, h6, sup {
      $heading-offset: -1rem;
      &[id]:target {
        scroll-margin-top: #{$anchor-offset + $offset};
      }
    }
  }
}

@mixin nav-bar-anchor-offset {
  @include nav-bar-offset($screenViewNavHeightNarrow);
  @media screen and (min-width: $screenViewBreakpointWidthNarrow) {
    @include nav-bar-offset($screenViewNavHeight);
  }
}

html {
  // --dim-image-filter: grayscale(30%);
  --dim-image-filter: brightness(75%);
}

$fallbackStackDefault: (Arial);

$familyDefaultMap: (
  styles: (
    default: (
      font-weight: 400,
      line-height: 1.5
    ),
    bold: (
      font-weight: 600,
    )
  ),
  roles: (
    display: (
      styles: (
        default: (
          font-weight: 400,
          line-height: 1.2
        ),
        bold: (
          font-weight: 600,
        )
      )
    )
  )
);

@mixin defineFontDefinition($definitionID: default, $fontFamilyID: default) {

  $prefix: font-definition_#{$definitionID}_;

  // @include mapToCSSProperties($fontFamilyMap, fontFamilyMap);

  // Get the specification of this font family
  $specFamily: map-get($fontFamilyMap, $fontFamilyID);


  @if ($specFamily) {

    // Create a new font definition for this font family
    $defFamily: ();

    $fontNameFamily: map-get($specFamily, name);
    $fallbackStackFamily: map-get($specFamily, fallback);
    $fallbackStackFamily: defaultTo($fallbackStackDefault, map-get($specFamily, fallback));
    // --fallbackStackFamily: #{$fallbackStackFamily};

    $specStyles: updateMap(map-get($familyDefaultMap, styles), map-get($specFamily, styles));

    $specRolesDefault: updateMap((default: (styles: $specStyles)), map-get($familyDefaultMap, roles));
    $specRoles:  updateMap($specRolesDefault,  map-get($specFamily, roles));

    $specVariantsDefault: updateMap((default: (
      name: $fontNameFamily,
      fallback: $fallbackStackFamily,
      styles: $specStyles
    )), map-get($familyDefaultMap, variants));

    // $specVariants: $specVariantsDefault;
    // $specVariants: map-get($specFamily, variants);
    $specVariants: updateMap($specVariantsDefault, map-get($specFamily, variants));

    // @include mapToCSSProperties($specStyles, specStyles);
    // @include mapToCSSProperties($specRoles, specRoles);
    // @include mapToCSSProperties($specVariants, specVariants);

    $defRoleMap: ();
    @each $role, $specRole in $specRoles {
      $defRole: updateMap(map-get($specRoles, default), $specRole);
      // @include mapToCSSProperties($defRole, defRoleInitial_role-#{$role});
      $prefixRole: $prefix;
      $prefixRole: #{$prefix}#{$role}_;
      --#{$prefixRole}font-family_ID: #{$fontFamilyID};
      // @include mapToCSSProperties($specRole, specRole_role-#{$role});

      $fontNameRole: defaultTo($fontNameFamily, map-get($specRole, name));
      $fallbackStackRole: defaultTo($fallbackStackFamily, map-get($specRole, fallback));

      $stylesRole: updateMap($specStyles, map-get($specRole, styles));
      // @include mapToCSSProperties($stylesRole, stylesRole_role-#{$role});

      // Go through all variants (default, small-caps, oldstyle-nums etc.)
      // that are defined for this font family's specification
      $defVariantMap: ();
      @each $variant, $specVariant in $specVariants {
        // @include mapToCSSProperties($specVariant, specVariant_variant-#{$variant});
        $defVariant: updateMap(map-get($specVariants, default), (styles: $stylesRole));
        $defVariant: updateMap($defVariant, $specVariant);
        // $defVariant: updateMap(updateMap(map-get($specVariants, default), $defRole), $specVariant);
        // @include mapToCSSProperties($defVariant, defVariantInitial_variant-#{$variant});
        // Prefix to use for this variant if it is not default
        $prefixVariant: $prefixRole;
        $prefixVariant: #{$prefixVariant}#{$variant}_;

        // Variants may have different `font-family`
        $fontNameVariant: defaultTo($fontNameRole, map-get($specVariant, name));
        // Variants may have different fallback fonts
        $fallbackStackVariant: defaultTo($fallbackStackRole, map-get($specVariant, fallback));
        // --fallbackStackVariant: #{$fallbackStackVariant};
        $fontStackVariant: join( ($fontNameVariant), $fallbackStackVariant);
        // --#{$prefixVariant}font-family: #{inspect($fontStackVariant)};

        $stylesVariant: map-get($defVariant, styles);
        // Variants may have different styles
        $defStyleMap: ();
        @each $style, $specStyle in $stylesRole {
          $defStyle: map-get($stylesRole, default);
          $defStyle: updateMap(map-get($stylesRole, default), map-get($stylesVariant, default) );
          $defStyle: updateMap(map-get($stylesRole, $style), map-get($stylesVariant, $style) );
          $defStyle: updateMap($defStyle, $specStyle);
          // @include mapToCSSProperties(map-get($stylesVariant, $style), stylesVariant_style-#{$style});
          // @include mapToCSSProperties($defStyle, defStyleInitial_style-#{$style});

          $prefixStyle: #{$prefixVariant};
          $prefixStyle: #{$prefixStyle}#{$style}_;

          --#{$prefixStyle}font-family: #{inspect($fontStackVariant)};
          @each $key, $value in $defStyle {
            --#{$prefixStyle}#{$key}: #{$value};
          }
          // @include mapToCSSProperties($defStyle, defStyleFinal_style-#{$style});
          $defStyleMap: map-merge($defStyleMap, ($style: $defStyle));
        }
        $defVariant: map-merge($defVariant, (styles: $defStyleMap));
        $defVariantMap: map-merge($defVariantMap, ($variant: $defVariant));
        // @include mapToCSSProperties($defVariant, defVariantFinal_variant-#{$variant});
      }
      $defRole: map-merge($defRole, (variants: $defVariantMap));
      $defRoleMap: map-merge($defRoleMap, ($role: $defRole));
      // @include mapToCSSProperties($defRole, defRoleFinal_role-#{$role});
    }
    $defFamily: map-merge($defFamily, (roles: $defRoleMap));

    // Store the created font definition as $definitionID
    // NOTE: the `!global` keyword ensures that we work with the global
    // variable defined in `claris-main.scss`
    // @include mapToCSSProperties($defFamily, defineFontDefinition_definitionID-#{$definitionID}_);
    $fontDefinitionMap: map-merge($fontDefinitionMap, ($definitionID: $defFamily)) !global;
  }
  @else {
    --#{$originPrefix}defineFontDefinition_undefined: #{$fontFamilyID};
  }

  // FIXME: Output updated $fontDefinitionMap
  // @include mapToCSSProperties($fontDefinitionMap, fontDefinitionMap);
  // @warn(print-map($fontDefinitionMap));
}

@mixin useFontDefinition($definitionID: default, $useRole: default, $useVariant: default, $useStyle: all) {

  $originDefinitionID: $definitionID;

  $prefix: font-definition_;
  $originPrefix: #{$prefix}#{$definitionID}_;
  $targetPrefix: #{$prefix};

  @if ($definitionID == inherit) {
    $originDefinitionID: default;
    $originPrefix: #{$prefix}#{$originDefinitionID}_;
  }


  $defFamily: map-get($fontDefinitionMap, $originDefinitionID);

  @if ($defFamily) {
    // FIXME: Validate if we got the definition
    @include mapToCSSProperties($defFamily, useFontDefinition_definitionID-#{$definitionID});

    // --useFontDefinition_definitionID-#{$definitionID}_role-#{$useRole}_styles-#{$useStyle}_variant-#{$variant}__originPrefix: #{$originPrefix};
    // --useFontDefinition_definitionID-#{$definitionID}_role-#{$useRole}_variant-#{$variant}_useStyle-#{$useStyle}__targetPrefix: #{$targetPrefix};
    // --#{$targetPrefix}font-family: var(--#{$originPrefix}font-family);

    @each $role, $defRole in map-get($defFamily, roles) {
      $prefixRole: #{$role}_;

      @each $variant, $defVariant in map-get($defRole, variants) {
        $prefixVariant: #{$variant}_;

        $defStyleMap: map-get($defVariant, styles);
        @if ($defStyleMap) {
        //   @include mapToCSSProperties($defStyleMap, useFontDefinition_definitionID-#{$definitionID}__defStyleMap);
          $originPrefixRoleVariant: #{$originPrefix}#{$prefixRole}#{$prefixVariant};
          $targetPrefixRoleVariant: #{$targetPrefix}#{$prefixRole}#{$prefixVariant};
          $defaultPrefixRoleVariant: #{$prefix}default_#{$prefixRole}#{$prefixVariant};

          @each $style, $defStyle in $defStyleMap {
            $stylePrefix: #{$style}_;

            $originPrefixStyle: #{$originPrefixRoleVariant}#{$stylePrefix};
            $targetPrefixStyle: #{$targetPrefixRoleVariant}#{$stylePrefix};
            $defaultPrefixStyle: #{$defaultPrefixRoleVariant}#{$stylePrefix};

            @if (($style == $useStyle) or ($style == all) or ($style == default)) {
              @each $key in (font-family) {
                @if ($role == $useRole) and ($variant == $useVariant) {
                  --#{$targetPrefixStyle}#{$key}: var(--#{$originPrefixStyle}#{$key});
                  #{$key}: var(--#{$targetPrefixStyle}#{$key});
                }
                @if ($originDefinitionID != default) {
                  --#{$defaultPrefixStyle}#{$key}: var(--#{$originPrefixStyle}#{$key});
                }
              }
            }

            // --useFontDefinition_definitionID-#{$definitionID}_role-#{$useRole}_variant-#{$variant}_style-#{$style}__originPrefixStyle: #{$originPrefixStyle};
            // --useFontDefinition_definitionID-#{$definitionID}_role-#{$useRole}_variant-#{$variant}_style-#{$style}__targetPrefixStyle: #{$targetPrefixStyle};
            @each $key, $value in $defStyle {
              @if ( ($role == $useRole) and ($variant == $useVariant)) {
                --#{$targetPrefixStyle}#{$key}: var(--#{$originPrefixStyle}#{$key});
              }
              @if ($originDefinitionID != default) {
                --#{$defaultPrefixStyle}#{$key}: var(--#{$originPrefixStyle}#{$key});
              }
            }
            @if ( ($role == $useRole) and ($variant == $useVariant)) {
              @if (($style == $useStyle) or ($style == all) or ($style == default)) {
                @each $key, $value in $defStyle {
                  #{$key}: var(--#{$targetPrefixStyle}#{$key});
                }
              }
              @else if ($useStyle == all) and ($style == bold) {
                bold, strong {
                  @each $key, $value in $defStyle {
                    #{$key}: var(--#{$targetPrefixStyle}#{$key});
                  }
                }
              }
              @else {
              --useFontDefinition_definitionID-#{$definitionID}_role-#{$role}_variant-#{$variant}_style-#{$style}_unused: #{$style};
              }
            }
          }
        }
      }
    }
  }
  @else {
    --#{$originPrefix}useFontDefinition_undefined: #{$definitionID};
  }
}

@mixin defineAndUseFontFamily($definitionID: default, $fontFamilyID: default, $role: default) {
  @include defineFontDefinition($definitionID, $fontFamilyID, $role);
  @include useFontDefinition($definitionID);
}

// Generating fluid font scales for copy-paste: https://www.fluid-type-scale.com/calculate https://utopia.fyi/type/calculator/
// Using SASS: https://www.smashingmagazine.com/2022/10/fluid-typography-clamp-sass-functions/
@function fluid($min-size, $max-size, $min-breakpoint: $screenViewBreakpointWidthMobile, $max-breakpoint: $screenViewBreakpointWidthWide, $unit: vw) {
  $slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
  $slope-to-unit: roundDec($slope * 100, 2);
  $intercept-rem: roundDec($min-size - $slope * $min-breakpoint, 2);
  $min-size-rem: roundDec($min-size, 2);
  $max-size-rem: roundDec($max-size, 2);
  @return clamp(#{$min-size-rem}, #{$slope-to-unit}#{$unit} + #{$intercept-rem}, #{$max-size-rem});
}

@function geometric-scaled-prop($prop, $scale-factor, $shift: 0, $factor-normal: 1) {
  @return calc(#{roundDec($factor-normal * math.pow($scale-factor, $shift), $fluidScaleDigits)} * var(--#{$prop}-base));
}

@mixin geometric-scale($prop, $base-size, $scale-factor: $geometricScaleFactor, $base-shift: 0, $smallest: 9, $largest: 9) {

  $smaller-factor-idx-max: 5;
  $larger-factor-idx-max: 6;
  --#{$prop}-base: #{$base-size};
  --#{$prop}-normal: #{geometric-scaled-prop($prop, $scale-factor, $base-shift)};
  @for $i from 1 through $smaller-factor-idx-max {
    --#{$prop}-smaller-#{$i}: #{geometric-scaled-prop($prop, $scale-factor, $base-shift - min($smallest, $i))};
  }
  @for $i from 1 through $larger-factor-idx-max {
    --#{$prop}-larger-#{$i}: #{geometric-scaled-prop($prop, $scale-factor, $base-shift + min($largest, $i))};
  }
}

@mixin fluid-geometric-scale($prop, $min-size, $max-size, $min-breakpoint: $screenViewBreakpointWidthMobile, $max-breakpoint: $screenViewBreakpointWidthWide, $unit: vw,
    $scale-factor: $geometricScaleFactor, $base-shift: 0, $smallest: 9, $largest: 9) {

  $smaller-factor-idx-max: 3;
  $larger-factor-idx-max: 6;
  --#{$prop}-base: #{fluid($min-size, $max-size, $min-breakpoint, $max-breakpoint, $unit)};

  /* Fallback variables for browsers that don't support clamp */
  @supports not (font-size: clamp(1rem, 1vw, 1rem)) {
    --#{$prop}-base: #{$min-size};
    @media screen and (min-width: $max-breakpoint) {
      --#{$prop}-base: #{$max-size};
    }
  }

  --#{$prop}-normal: #{geometric-scaled-prop($prop, $scale-factor, $base-shift)};
  @for $i from 1 through $smaller-factor-idx-max {
    --#{$prop}-smaller-#{$i}: #{geometric-scaled-prop($prop, $scale-factor, $base-shift - min($smallest, $i))};
  }
  @for $i from 1 through $larger-factor-idx-max {
    --#{$prop}-larger-#{$i}: #{geometric-scaled-prop($prop, $scale-factor, $base-shift + min($largest, $i))};
  }
}

@function fractional-scaled-prop($prop, $numerator: $fractionalScaleDenominator, $denominator: $fractionalScaleDenominator, $factor-normal: 1) {
  @if ($numerator == $denominator) {
    @return var(--#{$prop}-base);
  }
  @return calc(#{roundDec($factor-normal * math.div($numerator, $denominator), $fluidScaleDigits)} * var(--#{$prop}-base));
}

@mixin fluid-fractional-scale($prop, $min-size, $max-size, $min-breakpoint: $screenViewBreakpointWidthMobile, $max-breakpoint: $screenViewBreakpointWidthWide, $unit: vw,
    $denominator: $fractionalScaleDenominator, $base-shift: 0) {

  $numerator-max: 4 * $denominator;
  --#{$prop}-base: #{fluid($min-size, $max-size, $min-breakpoint, $max-breakpoint, $unit)};
  --#{$prop}: #{fractional-scaled-prop($prop, $base-shift + $denominator)};
  @for $i from 0 through $numerator-max {
    --#{$prop}_#{$denominator}-#{$i}: #{fractional-scaled-prop($prop, $base-shift + $i)};
  }
}

html {
  --to-be-eliminated-by-csspurge: black;
  // --font-sans: #{$fontFamilySansID};
  // --font-serif: #{$fontFamilySerifID};
  // --font-mono: #{$fontFamilyMonoID};

  $fontStyles: (default, sans, serif, mono);
  $fontDefinitions: (
    (article, serif),
    (code, mono),
    (meta, sans)
  );
  // FIXME: debug with only one font style
  // $fontStyles: (default);
  // $fontDefinitions: ();

  @each $style in $fontStyles {
    @include defineFontDefinition($style, $style);
  }
  @each $defID, $defSpec in $fontDefinitions {
    @include defineFontDefinition($defID, $defSpec);
  }

  @include fluid-geometric-scale('font-size_root', 1rem, 1.25rem, $screenViewBreakpointWidthMobile, $screenViewBreakpointWidthOneColumn);
  @include fluid-geometric-scale('font-size', 1rem, 1.25rem, $screenViewBreakpointWidthMobile, $screenViewBreakpointWidthOneColumn);
  @include fluid-geometric-scale('font-size_heading', 1.25rem, 2rem, $screenViewBreakpointWidthMobile, $screenViewBreakpointWidthWide);
  @include fluid-fractional-scale('inner_margin', 0.75rem, 2.5rem, $screenViewBreakpointWidthMobile, $screenViewBreakpointWidthWide);
  @include fluid-fractional-scale('inner_padding', 0.75rem, 2.5rem, $screenViewBreakpointWidthMobile, $screenViewBreakpointWidthWide);

  --font-size: var(--font-size-normal);
  --font-size-aside: var(--font-size_root-normal);
  --font-size-aside-meta: var(--font-size_root-smaller-1);
  --font-size-footer: var(--font-size_root-smaller-1);

  --font-size-lede: var(--font-size_root-larger-1);

  --font-size-meta: var(--font-size_root-smaller-1);
  --font-size-button: var(--font-size-smaller-1);

  --font-size-title: var(--font-size_heading-larger-4);
  --font-size-supertitle: var(--font-size_heading-smaller-1);
  --font-size-subtitle: var(--font-size_heading-normal);

  --font-size-nav: var(--font-size-normal);

  --font-weight-bold: 600;
  --font-weight-light: 400;
  --font-weight-heading: 600;
  --font-weight-supertitle: 600;
  --font-weight-subtitle: 400;
  --font-weight-code: 400;

  // --line-height: 1.5;
  --line-height-heading: 1.2;
  --line-height-label: 1.2;


  --icon-height: 1.5em;
  --icon-height-nav: 1.5rem;
  --icon-height-meta: 1.1em;

  // --ease: cubic-bezier(.19,1,.22,1);
  --ease: cubic-bezier(0.39, 0.575, 0.565, 1);
  --easing: cubic-bezier(0.19, 1, 0.22, 1);

  --color-scheme: 'light';

  // https://web.dev/prefers-color-scheme/#activating-dark-mode-in-the-operating-system
  --color-scheme-duration: 0.7s;
  --color-scheme-timing: ease;

  --screenViewWidthChrome: #{$screenViewWidthChrome};
  --screenViewWidthUltrawide: #{$screenViewWidthUltrawide};
  --screenViewFeatureImageWidthMax: #{$screenViewFeatureImageWidthMax};

  --content_multicolumn_max-width: #{$screenViewWidthChrome};
  --content_max-width: #{$screenViewColumnWidthMax};
  --content_wide_max-width: #{$screenViewColumnWidthWideMax};
  @media screen and (min-width: #{$screenViewBreakpointWidthWide}) {
    --content_max-width: #{$screenViewColumnWidthWideMax};
  }

  --screenViewNavHeight: #{$screenViewNavHeightNarrow};
  @media screen and (min-width: #{$screenViewBreakpointWidthNarrow}) {
    --screenViewNavHeight: #{$screenViewNavHeight};
  }

  $screenViewBreakpoints: (
    'width': (
      'mobile': $screenViewBreakpointWidthMobile,
      'narrow': $screenViewBreakpointWidthNarrow,
      'onecolumn': $screenViewBreakpointWidthOneColumn,
      'twocolumn': $screenViewBreakpointWidthTwoColumn,
      'wide': $screenViewBreakpointWidthWide,
      'ultrawide': $screenViewBreakpointWidthUltrawide,
    ),
    'height': (
      'shallow': $screenViewBreakpointHeightShallow,
      'tall': $screenViewBreakpointHeightTall,
    ),
  );

  $screenViewMargin: (
    'outer': (
      'mobile': $screenViewBodyMarginMobile,
      'narrow': $screenViewBodyMarginNarrow,
      'onecolumn': $screenViewBodyMarginOneColumn,
    ),
    'inner': (
      'mobile': $screenViewInnerMarginMobile,
      'narrow': $screenViewInnerMarginNarrow,
      'onecolumn': $screenViewInnerMarginOneColumn,
    ),
  );

  $screenViewPadding: (
    'outer': (
      'mobile': $screenViewBodyPaddingMobile,
      'narrow': $screenViewBodyPaddingNarrow,
      'onecolumn': $screenViewBodyPaddingOneColumn,
    ),
    'inner': (
      'mobile': $screenViewInnerPaddingMobile,
      'narrow': $screenViewInnerPaddingNarrow,
      'onecolumn': $screenViewInnerPaddingOneColumn,
    ),
  );

  // @mixin screen-margin-padding($breakpoint) {
  //   @each $where in ('outer', 'inner') {
  //     $marginBase: map-get(map-get($screenViewMargin, $where), $breakpoint);
  //     $paddingBase: map-get(map-get($screenViewPadding, $where), $breakpoint);
  //     @if $paddingBase {
  //       @each $sizeDesc, $numQuarters in ('-1': 1, '-2': 2, '-3': 3, '': 4) {
  //         @each $direction in ('x', 'y') {
  //           --#{$where}_margin-#{$direction}#{$sizeDesc}: #{math.div( $marginBase * $numQuarters, 4)};
  //           --#{$where}_padding-#{$direction}#{$sizeDesc}: #{math.div($paddingBase * $numQuarters, 4)};
  //         }
  //       }
  //     }
  //   }
  // }

  // $breakpointsWidth: map-get($screenViewBreakpoints, 'width');
  // @for $i from 1 through length($breakpointsWidth) {
  //   $breakpointKeys: map-keys($breakpointsWidth);
  //   $breakpoint: nth($breakpointKeys, $i);
  //   $breakpointWidth: map-get(map-get($screenViewBreakpoints, 'width'), $breakpoint);
  //   @if $i == 1 {
  //     @include screen-margin-padding($breakpoint);
  //   }
  //   @else {
  //     @media screen and (min-width: $breakpointWidth) {
  //       @include screen-margin-padding($breakpoint);
  //     }
  //   }
  // }

  --navigation-header-height: 0;

  @include generate_colors($colors-lit);
  --choice-bg-menu: var(--haze);
  --choice-bg-menu-active: var(--xxxhaze);

  @mixin color-scheme-dark {
    --theme-text-dim: hsla(0,0%,100%,0.87);
    --color-scheme: 'dark';
    --text: var(--theme-text-dim);
    --accent: var(--bubble);
    // --choice-bg: var(--bg);
    --code-bg: var(--translucent);
    --header-text: var(--theme-text-dim);
    --table-bg: var(--code-bg);
    --table-haze: hsla(0, 0%, 100%, 0.1);
    --table-border: var(--code-bg);
    --footer-bg: var(--bg);
    svg.icon {
      fill: var(--theme-text);
    }
    .icon {
      img {
        background: none;
      }
      svg {
        fill: #fafafa;
      }
    }
    .nav_color-scheme {
      &_choice {
        &_light {
          opacity: 0.0;
        }
        &_dark {
          opacity: 1.0;
        }
      }
    }
    @media (any-hover: hover) {
      &:not([data-color-scheme-transition]) .nav_color-scheme_choice:hover {
        .nav_color-scheme_choice {
          &_light {
            opacity: 1.0;
            z-index: 1;
          }
          &_dark {
            opacity: 0.0;
            transition: none;
            z-index: auto;
          }
        }
      }
    }

    @include generate_colors( map-merge($colors-lit, $colors-dim) );
    img:not([src*=".svg"]) {
      filter: var(--dim-image-filter);
    }
  }

  @media screen {
    &[data-color-scheme="dark"] {
      @include color-scheme-dark;
    }
  }
  @media screen and (prefers-color-scheme: dark) {
    &:not([data-color-scheme="light"]) {
      @include color-scheme-dark;
    }
  }

  &:not(.kind-page) {
    --choice-bg: var(--theme-bg);
    --RGB_choice-bg: var(--RGB_theme-bg);
  }
}
