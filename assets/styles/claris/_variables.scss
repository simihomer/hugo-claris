/* Style sheet for content type '#{$contentType}' and media type '#{$mediaType}'
 * File='styles/claris/_variables.scss'
 */

$list-excerpt-width: 20rem;
$list-excerpt-width: (($screenViewBreakpointWidthOneColumn - (3 * $screenViewInnerPaddingOneColumn) ) / 2);

$list-style-indent: 0;
$list-style-ul-indent: $list-style-indent;
$list-style-ol-indent: $list-style-indent;

$screenViewNavHeightNarrow: 2.5rem;
$screenViewNavHeight: 3rem;

$heading-padding-top: 0.5rem;
$heading-margin-top: 1.5rem;

$main-z-index: 1;

@mixin generate_colors($colors) {
  // Add RGB / RGBA color definitions
  @each $color, $value in $colors {
    --#{$color}: #{$value};
    --RGB_#{$color}: #{mapColorVarToRGB($colors, $value)};
  }
}

@function direction($value) {
  @if index('right' 'left', $value) != null {
    @return 'x';
  }
  @if index('top' 'bottom', $value) != null {
    @return 'y';
  }
  @error "Expected 'top', 'right', 'bottom' or 'left' but got #{$value}"
}

@function is-number($value) {
  @return type-of($value) == 'number';
}

@function is-null($value) {
  @return type-of($value) == 'null';
}

@function is-absolute-length($value) {
  @return type-of($value) == 'number' and index('cm' 'mm' 'in' 'px' 'pt' 'pc', unit($value)) != null;
}

@mixin element-padding($where: 'outer', $top: null, $right: null, $bottom: null, $left: null) {
  @if is-null($right) and (not is-null($top)) {
    $right: $top
  }
  @if is-null($bottom) and (not is-null($top)) {
    $bottom: $top
  }
  @if is-null($left) and (not is-null($right)) {
    $left: $right;
  }

  $pVar: ('top': $top, 'right': $right, 'bottom': $bottom, 'left': $left);
  $pFix: ('top': $top, 'right': $right, 'bottom': $bottom, 'left': $left);
  @each $key, $value in $pVar {
    $direction: direction($key);
    @if type-of($value) == 'number' {
      @if is-absolute-length(#{$value}) {
        @debug "absolute-length: #{$value}";
        $pFix: map-merge($pFix, (#{$key}: #{$value}) );
        $pVar: map-merge($pVar, (
          #{$key}: calc( max(#{$value}, env(safe-area-inset-#{$key}, 0px) ) )
        ));
      }
      @else {
        $valueFix: $value;
        $valueVar: $value;
        @if $value == 0 {
          $valueFix: 0;
          $valueVar: env(safe-area-inset-#{$key}, 0px)
        }
        @else {
          // FIXME: Use a single padding value for browsers that don't support CSS properties
          $valueFix: ($value * $screenViewInnerPaddingNarrow);
          $valueVar: calc( max(#{$value} * var(--#{$where}_padding-#{$direction}), env(safe-area-inset-#{$key}, 0px) ) )
        }
        $pFix: map-merge($pFix, (#{$key}: $valueFix));
        $pVar: map-merge($pVar, (#{$key}: $valueVar));
        }
    }
    @else {
      $pFix: map-merge($pFix, (#{$key}: null) );
      $pVar: map-merge($pVar, (#{$key}: null) );
    }
  }
  // @debug "pFix: #{$pFix}";
  // @debug "pVar: #{$pVar}";

  // For browsers that don't support CSS properties
  @each $key, $value in $pFix {
    padding-#{$key}: #{$value};
  }
  @supports (color: var(--CSS-property-support-validation)) {
    @media screen {
      @each $key, $value in $pVar {
        padding-#{$key}: #{$value};
      }
    }
  }
}

@mixin background_dark() {
  background: var(--bg-dark);
  color: var(--text-dark);
  h1, h2, h3, h4, h5, h6 {
    color: var(--text-dark);
  }
  a {
    color: var(--link-dark);
    @supports (any-hover:hover) {
      &:hover {
        color: var(--link-dark-hover);
      }
      &:active {
        color: var(--link-dark-active);
      }
    }
  }
  svg.icon {
    fill: var(--text-dark);
  }
  .icon {
    img {
      background: none;
    }
    svg {
      fill: var(--text-dark);
    }
  }
}

@mixin link-lvhfa($link: var(--link), $visited: var(--link), $hover: var(--link-hover), $focus: var(--link-hover), $active: var(--link-active)) {
  a:not(.button):not(nav a):not(sup a) {
    color: $link;
    text-decoration: none;
    &:link {
      color: $link;
    }
    &:visited {
      color: $link;
    }
    &:hover {
      @media (any-hover: hover) {
        color: $hover;
        text-decoration: underline;
        text-underline-position: under;
        text-underline-offset: 0.1em;
      }
    }
    &:focus {
      color: $focus;
      text-decoration: underline;
      text-underline-position: under;
      text-underline-offset: 0.1em;
    }
    &:active {
      color: $active;
      text-decoration: underline;
      text-underline-position: under;
      text-underline-offset: 0.1em;
    }
  }
}

@mixin link-lvhfa-dark() {
  @include link-lvhfa($link: var(--link-dark), $visited: var(--link-dark), $hover: var(--link-dark-hover), $focus: var(--link-dark-hover), $active: var(--link-dark-active));
}

@mixin content_base() {
  clear: both;
}

@mixin content_base_centered() {
  @include content_base();
  margin-left: auto;
  margin-right: auto;
}

@mixin content() {
  // Do nothing
}

@mixin content_singlecolumn() {
  @include content_base_centered();
  max-width: var(--content_max-width);
  // max-width: calc(min(100%, var(--content_max-width)));
}

// Content that has multiple columns
@mixin content_multicolumn() {
  @include content_base_centered();
  max-width: var(--content_max-width); // For IE 11
  @supports (display: grid) {
    max-width: var(--content_multicolumn_max-width);
    // FIXME: Not sure what (min(100%, ...) is supposed to accomplish.
    // Probably not needed anymore
    // max-width: calc(min(100%, var(--content_multicolumn_max-width)));
  }
}

// Limit width of chrome, i.e. header and footer
@mixin chrome() {
  max-width: var(--screenViewWidthChrome);
  margin-left: auto;
  margin-right: auto;
}

@mixin footer() {
  @include content_base_centered();
  max-width: var(--screenViewWidthChrome);
}

@mixin content_wide() {
  @include content_base();
  max-width: var(--content_wide_max-width);
}

@mixin content_chrome-width() {
  @include content_base();
  max-width: var(--screenViewWidthChrome);
}

@mixin content_ultrawide() {
  @include content_base();
  max-width: var(--screenViewWidthUltrawide);
}

@mixin aside() {
  font-size: var(--font-size-aside);
  @include content_base();
  h1, h2 {
    font-size: 125%;
  }
  h3 {
    font-size: 112.5%;
  }
  h4, h5, h6 {
    font-size: 100%;
  }
}

@mixin aside-meta() {
  @include content_base();
  font-size: var(--font-size-meta);
  h1, h2 {
    font-size: 125%;
  }
  h3 {
    font-size: 112.5%;
  }
  h4, h5, h6 {
    font-size: 100%;
  }
}

@mixin list-style($margin-vertical: $screenViewInnerPaddingMobile / 2, $padding-vertical: $screenViewInnerPaddingMobile / 2, $indent: $list-style-indent) {
  ul, ol {
    // list-style: disc outside none; // initial;
    padding: $padding-vertical 0;
    margin: 0 0 0 $indent;
    li {
      margin: ($margin-vertical / 2) 0;
      padding: ($padding-vertical / 2) 0;
    }
  }
  ul > li {
    list-style: disc outside;
    margin-left: 1em;
    padding-left: 0.5em;
    & > ul li {
      list-style-type: none;
      margin-left: 0;
      padding-left: 0.5em;
      &::before {
        content: '–';
        float: left;
        margin-left: -1.75em;
      }
      & > ul li  {
        margin-left: -0.25em;
        padding-left: 0.75em;
        list-style-type: circle;
        &::before {
          content: none;
        }
      }
    }
  }
  ol li {
    list-style: decimal outside;
    margin-left: 1em;
    padding-left: 0.5em;
  }
  li ul, li ol {
    padding-left: 1.25em;
  }
}

// Inline list with separators
// https://www.jankollars.com/posts/multi-line-horizontal-list-with-separators/
@mixin inline-separator-list($list-item-separation: 2ch, $list-separator: '•') {
  $list-sep-width: $list-item-separation / 3.0 + 0.5ch;
  ul {
    display: flex;
    flex-wrap: wrap;
    padding-left: 0;
    list-style: none;
    // margin-left: calc(-3ch);
    margin-left: -$list-item-separation + 0.5ch;
    // clip-path: inset(0 0 0 3ch);
    clip-path: inset(0 0 0 $list-item-separation - 0.5ch);
    & > * {
      padding-left: $list-item-separation;
    }
    li {      // padding-left: 1ch;
      list-style: none;
      padding-left: $list-item-separation;
      margin-left: -$list-item-separation / 3.0 - $list-sep-width;
    }
    li::before {
      content: '•';
      display: inline-block;
      // margin-right: 0.5ch;
      // margin-right: 0.5ch;
      margin-right: $list-item-separation / 3.0 - 0.5ch;
      // width: 1ch;
      width: $list-sep-width;
      text-align: center;
    }
  }
}

@mixin viewport($width: 1024px, $margin: 25px) {
  max-width: $width;
  margin: $margin auto;
  @content;
}

@mixin shadow($opacity: 0.17) {
  box-shadow: 0 0 3rem rgba(0,0,0,$opacity);
  &:hover {
    box-shadow: 0 0 5rem rgba(0,0,0, (1.5 * $opacity));
  }
}

@mixin drop-shadow($dist: 3rem, $opacity: 0.2, $hover-opacity: 0.4) {
  box-shadow: 0 0 $dist rgba(0, 0, 0, $opacity);
  &:hover {
    box-shadow: 0 0 $dist rgba(0, 0, 0, $hover-opacity);
  }
}

@mixin drop-shadow-offset($x: 0, $y: 0, $dist: 3rem, $opacity: 0.2, $hover-opacity: 0.4) {
  box-shadow: $x $y $dist rgba(0, 0, 0, $opacity);
  &:hover {
    box-shadow: $x $y $dist rgba(0, 0, 0, $hover-opacity);
  }
}

@mixin background-gradient-choice-haze($direction, $alpha) {
  background: linear-gradient(#{$direction},
    rgba(var(--RGB_choice-bg), #{$alpha}) 0%,
    rgba(var(--RGB_choice-bg), #{$alpha}) 20%,
    rgba(var(--RGB_xhaze), #{$alpha}) 90%,
    rgba(var(--RGB_xhaze), #{$alpha}) 100%);
}

@mixin background-gradient-translucent($direction, $alpha: 0.9, $alpha-blur: 0.6) {
  @include background-gradient-choice-haze($direction, $alpha);
  @if $alpha-blur > 0 {
    @supports ((-webkit-backdrop-filter: none) or (backdrop-filter: none)) {
      @include background-gradient-choice-haze($direction, $alpha-blur);
      backdrop-filter: blur(50px);
      -webkit-backdrop-filter: blur(50px);
    }
  }
}

/*
 * Ensure headings with ids (e.g. /about#experience) are not hidden by sticky header
 */
// https://stackoverflow.com/q/4086107/617559
// Other ideas: https://css-tricks.com/hash-tag-links-padding/, e.g.
//   https://codepen.io/kirkgleffe/pen/DfvuE
// Approach based on CSS property does not work with IE 11 and cannot be overridden with Autoprefixer
// html {
//   --navigation-header-height: #{$offset};
// }
// .main {
//   padding-top: #{$offset}; // For IE11 with postCSS Autoprefixer
//   padding-top: var(--navigation-header-height);
// }
// Note: the CSS below must be applied to all elements with an id, such as footnotes,
// not only headings
@mixin nav-bar-offset($offset: $screenViewNavHeight) {
  $anchor-offset: 1rem;
  .main {
    padding-top: $offset;
    margin-top: 0;
  }
  main {
    [id]:target {
      -webkit-background-clip: content-box;
      background-clip: content-box;
      padding-top: $offset + $anchor-offset;
      margin-top: - $offset - $anchor-offset;
      &.article_title {
        padding-top: calc(#{$offset} + #{$heading-padding-top});
        margin-top: - $offset;
      }
      &#contentContainer {
        padding-top: $offset;
        margin-top: - $offset;
      }
    }
    h1, h2, h3, h4, h5, h6 {
      $heading-offset: -1rem;
      &[id]:target {
        padding-top: calc( #{$offset} + #{$heading-offset} + #{$heading-margin-top} + #{$heading-padding-top} );
        margin-top: - $offset - $heading-offset;
      }
    }
  }
  .content {
    // Required as height of header pushes content down when position: sticky vs. position: fixed
    padding-top: inherit;
  }
}

@mixin nav-bar-anchor-offset {
  @include nav-bar-offset($screenViewNavHeightNarrow);
  @media screen and (min-width: $screenViewBreakpointWidthNarrow) {
    @include nav-bar-offset($screenViewNavHeight);
  }
}

// Alternative from web.dev
// FIXME: Does not work the same. The heaadings do not expand despite containing the ::before
/*
html {
  scroll-padding-top:calc(#{$screenViewNavHeight}+ #{$heading-padding-top})}

[id]:not([href]) {
  h1, h2, h3, h4, h5, h6 {
    &::before {
      content: " ";
      display: block;
      height: calc(#{$screenViewNavHeight} + #{$heading-padding-top});
      margin-top: calc(-#{$screenViewNavHeight} - #{$heading-padding-top});
      pointer-events: none;
      visibility: hidden;
    }
  }
}
*/

html {
  --dim-image-filter: grayscale(30%);
}

@mixin dim_colors() {
  @include generate_colors( map-merge($colors-lit, $colors-dim) );
  --choice-bg-menu: var(--xxhaze);
  --choice-bg-menu-active: var(--xhaze);
  &:not(.kind-page) {
    --choice-bg: var(--theme-bg);
    --RGB_choice-bg: var(--RGB_theme-bg);
    --choice-bg-menu: var(--xhaze);
    --choice-bg-menu-active: rgba(var(--RGB_light), 0.05);
  }
  img:not([src*=".svg"]) {
    filter: var(--dim-image-filter);
  }
}

html {
  --to-be-eliminated-by-csspurge: black;
  --font-sans: "#{$fontFamilySans}", "#{$fontFamilySansFallback}", "#{$fontFamilySansFallbackAndroid}", "Helvetica Neue", "Helvetica", sans-serif;
  --font-serif: "#{$fontFamilySerif}", "#{$fontFamilySerifFallback}", "#{$fontFamilySerifFallbackAndroid}", "Georgia", "Palatino", serif;
  --font-mono: "#{$fontFamilyMono}", "#{$fontFamilyMonoFallback}", "#{$fontFamilyMonoFallbackAndroid}", "Inconsolata", "Menlo", "Lucida Sans Typewriter", "Monaco", "Courier New", "Courier", monospace;
  --font: var(--font-sans);
  --font-article: var(--font-serif);
  --font-code: var(--font-mono);
  --font-size: 100%;
  --font-size-nav: 1.5rem;
  --font-size-meta: 0.875rem;
  --font-size-aside: 0.875rem;
  --font-size-footer: 0.875rem;
@media screen and (min-width: $screenViewBreakpointWidthMobileMenu) {
    --font-size-nav: 0.875rem;
  }
  @media screen and (min-width: $screenViewBreakpointWidthNarrow) {
  }
  @media screen and (min-width: $screenViewBreakpointWidthOneColumn) {
    --font-size: 125%;
    --font-size-nav: 1.0rem;
    --font-size-meta: 1.0rem;
    --font-size-aside: 1.0rem;
    --font-size-footer: 1.0rem;
  }
  @media screen and (min-width: $screenViewBreakpointWidthWide) {
    --font-size-nav: 1.25rem;
  }

  --font-weight: 400;
  --font-weight-strong: 600;
  --font-weight-light: 300;
  --font-weight-heading: 500;
  --font-weight-supertitle: 600;
  --font-weight-subtitle: 300;
  --font-weight-code: 400;
  --line-height: 1.6;
  --line-height-heading: 1.4;
  --line-height-label: 1.2;

  --icon-height: 1.5em;
  --icon-height-nav: 1.5rem;
  --icon-height-meta: 1.1em;

  // --ease: cubic-bezier(.19,1,.22,1);
  --ease: cubic-bezier(0.39, 0.575, 0.565, 1);
  --easing: cubic-bezier(0.19, 1, 0.22, 1);

  --color-mode: 'lit';

  // https://web.dev/prefers-color-scheme/#activating-dark-mode-in-the-operating-system
  --darkmode-duration: 0.7s;
  --darkmode-timing: ease;

  --screenViewWidthChrome: #{$screenViewWidthChrome};
  --screenViewWidthUltrawide: #{$screenViewWidthUltrawide};

  --content_multicolumn_max-width: #{$screenViewWidthChrome};
  --content_max-width: #{$screenViewColumnWidthMax};
  --content_wide_max-width: #{$screenViewColumnWidthWideMax};
  @media screen and (min-width: #{$screenViewBreakpointWidthWide}) {
    --content_max-width: #{$screenViewColumnWidthWideMax};
  }

  --screenViewNavHeight: #{$screenViewNavHeightNarrow};
  @media screen and (min-width: #{$screenViewBreakpointWidthNarrow}) {
    --screenViewNavHeight: #{$screenViewNavHeight};
  }

  $screenViewBreakpoints: (
    'width': (
      'mobile': $screenViewBreakpointWidthMobile,
      'narrow': $screenViewBreakpointWidthNarrow,
      'onecolumn': $screenViewBreakpointWidthOneColumn,
      'twocolumn': $screenViewBreakpointWidthTwoColumn,
      'wide': $screenViewBreakpointWidthWide,
      'ultrawide': $screenViewBreakpointWidthUltrawide,
    ),
    'height': (
      'shallow': $screenViewBreakpointHeightShallow,
      'tall': $screenViewBreakpointHeightTall,
    ),
  );

  $screenViewMargin: (
    'outer': (
      'mobile': $screenViewBodyMarginMobile,
      'narrow': $screenViewBodyMarginNarrow,
      'onecolumn': $screenViewBodyMarginOneColumn,
    ),
    'inner': (
      'mobile': $screenViewInnerMarginMobile,
      'narrow': $screenViewInnerMarginNarrow,
      'onecolumn': $screenViewInnerMarginOneColumn,
    ),
  );

  $screenViewPadding: (
    'outer': (
      'mobile': $screenViewBodyPaddingMobile,
      'narrow': $screenViewBodyPaddingNarrow,
      'onecolumn': $screenViewBodyPaddingOneColumn,
    ),
    'inner': (
      'mobile': $screenViewInnerPaddingMobile,
      'narrow': $screenViewInnerPaddingNarrow,
      'onecolumn': $screenViewInnerPaddingOneColumn,
    ),
  );

  @mixin screen-margin-padding($breakpoint) {
    @each $where in ('outer', 'inner') {
      $marginBase: map-get(map-get($screenViewMargin, $where), $breakpoint);
      $paddingBase: map-get(map-get($screenViewPadding, $where), $breakpoint);
      @if $paddingBase {
        @each $sizeDesc, $numQuarters in ('-1': 1, '-2': 2, '-3': 3, '': 4) {
          @each $direction in ('x', 'y') {
            --#{$where}_margin-#{$direction}#{$sizeDesc}: #{( $marginBase * $numQuarters / 4 )};
            --#{$where}_padding-#{$direction}#{$sizeDesc}: #{( $paddingBase * $numQuarters / 4 )};
          }
        }
      }
    }
  }

  $breakpointsWidth: map-get($screenViewBreakpoints, 'width');
  @for $i from 1 through length($breakpointsWidth) {
    $breakpointKeys: map-keys($breakpointsWidth);
    $breakpoint: nth($breakpointKeys, $i);
    $breakpointWidth: map-get(map-get($screenViewBreakpoints, 'width'), $breakpoint);
    @if $i == 1 {
      @include screen-margin-padding($breakpoint);
    }
    @else {
      @media screen and (min-width: $breakpointWidth) {
        @include screen-margin-padding($breakpoint);
      }
    }
  }

  --navigation-header-height: 0;

  @include generate_colors($colors-lit);
  --choice-bg-menu: var(--xhaze);
  --choice-bg-menu-active: rgba(var(--RGB_bg-dark), 0.5);

  &:not(.kind-page) {
    --choice-bg: var(--theme-bg);
    --RGB_choice-bg: var(--RGB_theme-bg);
    --choice-bg-menu: var(--theme-xxxhaze);
    --choice-bg-menu-active: rgba(var(--RGB_theme-xxxhaze), 0.05);
  }

  @mixin darkmode {
    --theme-text-dim: hsla(0,0%,100%,0.87);
    --color-mode: 'dim';
    --text: var(--theme-text-dim);
    --accent: var(--bubble);
    --choice-bg: var(--bg);
    --code-bg: var(--translucent);
    --header-text: var(--theme-text-dim);
    --table-bg: var(--code-bg);
    --table-haze: hsla(0, 0%, 100%, 0.1);
    --table-border: var(--code-bg);
    --footer-bg: var(--bg);
  }

  &[data-mode="dim"] {
    @include darkmode;
    svg.icon {
      fill: var(--theme-text);
    }
    .icon {
      img {
        background: none;
      }
      svg {
        fill: #fafafa;
      }
    }
    .color {
      &_choice {
        &:after {
          background-image: url("#{$images}moon-mono.svg");
          transform: translateX(1.4rem);
        }
      }
    }
    @include dim_colors();
  }

  @media screen and (prefers-color-scheme: dark) {
    &:not([data-mode="lit"]) {
      @include darkmode;
       svg.icon {
        fill: var(--text);
      }
      .icon {
        img {
          background: none;
        }
        svg {
          fill: #fafafa;
        }
      }
      .sidebar {
        &_inner {
          &:before {
            display: none;
          }
        }
      }
      .color {
        &_choice {
          &:after {
            background-image: url("#{$images}moon-mono.svg");
            transform: translateX(1.4rem);
          }
        }
      }
      @include dim_colors();
      body {
        transition: none;
      }
    }
  }
}
