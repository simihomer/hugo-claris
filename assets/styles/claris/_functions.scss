@use "sass:meta";
@use "sass:math";

// Replace substring with another string
// Credits: https://css-tricks.com/snippets/sass/str-replace-function/
@function str-replace($string, $search, $replace: '') {
  // @debug "str-replace('#{$string}', '#{$search}', '#{$replace}')";
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

// https://stackoverflow.com/a/64863842
@function colorVarToRGB($value) {
  /*
  @if str-slice(#{$value}, 1, 1) == "#" {
    @debug "colorVarToRGB(#{inspect($value)}): HEX: red=#{red($value)} hue: '#{hue($value)}'";
  }
  @else if str-slice(#{$value}, 1, 4) == "rgba" {
    @debug "colorVarToRGB(#{inspect($value)}): RGBA: red=#{red($value)} hue: '#{hue($value)}'";
  }
  @else if str-slice(#{$value}, 1, 3) == "rgb" {
    @debug "colorVarToRGB(#{inspect($value)}): RGB: red=#{red($value)} hue: '#{hue($value)}'";
  }
  @else if str-slice(#{$value}, 1, 4) == "hsla" {
    @debug "colorVarToRGB(#{inspect($value)}): HSLA: red=#{red($value)} hue: '#{hue($value)}'";
  }
  @else if str-slice(#{$value}, 1, 3) == "hsl" {
    @debug "colorVarToRGB(#{inspect($value)}): HSL: red=#{red($value)} hue: '#{hue($value)}'";
  }
  @else {
    $value: #00ff00;
    @debug "colorVarToRGB(#{inspect($value)}): DEFAULTING TO GREEN: #{inspect($value)}";
  }
  */
  @return round(red($value)), round(green($value)), round(blue($value));
}

@function mapColorVarToRGB($colors, $value) {
  // @debug "mapColorVarToRGB($colors, #{$value})";
  $color_value: $value;
  @if str-slice(#{$value}, 1, 3) == "var" {
    $color_key: str-replace($value, 'var(--');
    $color_key: str-replace($color_key, ')');
    $color_value: map-get($colors, $color_key);
    // @debug "    var key='#{$color_key}' value='#{$color_value}'";
    @if $color_value == null {
      $color_value: #ff0000;
      @debug "mapColorVarToRGB($colors, #{$value})";
      @debug "    key not found; defaulting to red: #{inspect($color_value)}";
    }
    @if str-slice(#{$color_value}, 1, 3) == "var" {
      @return mapColorVarToRGB($colors, $color_value);
    }
  }
  @return colorVarToRGB($color_value);
}

@function colorVarToHSLRounded($value) {
  @return round(hue($value)), round(saturation($value)), round(lightness($value)), alpha($value);
}

@function colorVarToHSL($value) {
  @return hue($value), saturation($value), lightness($value), alpha($value);
}

@function mapColorVarToHSL($colors, $value) {
  // @debug "mapColorVarToRGB($colors, #{$value})";
  $color_value: $value;
  @if str-slice(#{$value}, 1, 3) == "var" {
    $color_key: str-replace($value, 'var(--');
    $color_key: str-replace($color_key, ')');
    $color_value: map-get($colors, $color_key);
    // @debug "    var key='#{$color_key}' value='#{$color_value}'";
    @if $color_value == null {
      $color_value: #ff0000;
      @debug "mapColorVarToRGB($colors, #{$value})";
      @debug "    key not found; defaulting to red: #{inspect($color_value)}";
    }
    @if str-slice(#{$color_value}, 1, 3) == "var" {
      @return mapColorVarToHSL($colors, $color_value);
    }
  }
  @return colorVarToHSL($color_value);
}

@function roundDec($value, $fractionDigits: 0) {
  $power: math.pow(10, $fractionDigits);
  @return math.div(math.round($power * $value), $power);
}

// A function for filling in a map variable with default values
// https://stackoverflow.com/a/33536471/617559
@function updateMap($defaultMap, $updateMap: ()) {
  $mergedMap: ();
  @if (type-of($defaultMap) == 'map') {
    $mergedMap: $defaultMap;
    @if (type-of($updateMap) == 'map') {
      // We iterate over each property of the defaultMap
      @each $key, $value in $updateMap {
          // Add the default value to mergedMap
          $mergedMap: map-merge($mergedMap, ($key : $value));
      }
    }
  }
  @return $mergedMap;
}

// Take the default unless update is non-null
@function defaultTo($defaultValue, $updateValue: null) {
  $finalValue: $defaultValue;
  @if (type-of($updateValue) != 'null') {
    $finalValue: $updateValue;
  }
  @return $finalValue;
}

@mixin mapToCSSProperties($map, $prefix, $key: "") {
  @each $name, $value in $map {

      // copy the map key
      $key-copy: $key;
      // create name for CSS custom property that contains:
      // current key + child key from nested map
      $key: #{$key}_#{$name};

      @if meta.type-of($value) == "map" {
          // if value is a map, invoke it once more
          @include mapToCSSProperties($value, $prefix, $key);
      }
      @else {
        @if (meta.type-of($value) == 'list') {
          $value: inspect($value);
        }
        --#{$prefix}#{$key}: #{$value};
      }
      // next iteration of loop should go with unchanged key
      $key: $key-copy;
  }
}

// https://www.sitepoint.com/debugging-sass-maps/
@mixin debug-map($map) {
  @at-root {
      @debug-map {
          __toString__: inspect($map);
          __length__: length($map);
          __depth__: depth($map);
          __keys__: map-keys($map);
          __properties__ {
              @each $key, $value in $map {
                  #{'(' + type-of($value) + ') ' + $key}: inspect($value);
              }
          }
      }
  }
}


@function print-map ( $map, $str: "" ) {
  @each $k, $v in $map {
    @if type-of($v) == map {
      $str: "#{$str} \000D\000A #{$k}: ( #{print-map($v)} \000D\000A ), ";
    }
    @else {
      $str: "#{$str} \000D\000A \0009 #{$k}: #{$v}, ";
    }
  } // each
  @return $str;
} // @function print-map
